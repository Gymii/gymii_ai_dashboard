WITH user_stats AS (
    -- First identify all users, sandbox users, and free users
    SELECT 
        usp.user_id,
        usp.offer_id,
        usp.product_id,
        usp.expected_mmr,
        usp.onboarding_complete,
        usp.original_transaction_id IS NOT NULL AS has_subscription,
        usp.auto_renew_enabled, -- Include auto-renew status for cancellation tracking
        -- Determine if user is a sandbox user (only has short-term subscriptions)
        CASE WHEN usp.expiry_date - usp.purchase_date < INTERVAL '5 days' THEN TRUE ELSE FALSE END AS is_sandbox_user,
        CASE WHEN usp.expiry_date - usp.purchase_date < INTERVAL '25 days' or (usp.expiry_date - usp.purchase_date > INTERVAL '25 days' and usp.offer_id IN ('year-free')) THEN True ELSE False END AS is_in_free_trial,
        -- Check if user has a free subscription
        CASE WHEN usp.offer_id IN ('FREE_ACCESS_FOR_YEAR', 'year-free') 
             AND usp.original_transaction_id IS NOT NULL  
             THEN TRUE ELSE FALSE END AS is_free_user,
        -- Check if user is fully paying
        CASE WHEN usp.offer_id IS NULL
             AND usp.original_transaction_id IS NOT NULL  
             THEN TRUE ELSE FALSE END AS is_fully_paying_user,
        -- Check if user is partially paying
        CASE WHEN usp.offer_id NOT IN ('FREE_ACCESS_FOR_YEAR', 'year-free') 
             AND usp.offer_id IS NOT NULL
             AND usp.original_transaction_id IS NOT NULL 
             THEN TRUE ELSE FALSE END AS is_partially_paying_user
    FROM 
        user_subscription_profile usp
),
counts AS (
    -- Calculate base counts for different user segments
    -- Exclude sandbox users and free users from all calculations
    SELECT
        -- User stats
        COUNT(*) AS total_users,
        SUM(CASE WHEN is_sandbox_user THEN 1 ELSE 0 END) AS sandbox_users,
        SUM(CASE WHEN is_free_user THEN 1 ELSE 0 END) AS free_users,
        COUNT(*) - SUM(CASE WHEN is_sandbox_user OR is_free_user THEN 1 ELSE 0 END) AS analyzed_users,
        
        -- Onboarding stats (excluding sandbox and free users)
        SUM(CASE WHEN NOT is_sandbox_user AND NOT is_free_user AND onboarding_complete THEN 1 ELSE 0 END) AS completed_onboarding,
        SUM(CASE WHEN NOT is_sandbox_user AND NOT is_free_user AND has_subscription THEN 1 ELSE 0 END) AS users_with_subscription,

        -- Subscriber stats (excluding sandbox and free users)
        SUM(CASE WHEN NOT is_sandbox_user AND NOT is_free_user AND is_fully_paying_user AND has_subscription THEN 1 ELSE 0 END) AS fully_paid_users,
        SUM(CASE WHEN NOT is_sandbox_user AND NOT is_free_user AND is_partially_paying_user AND has_subscription THEN 1 ELSE 0 END) AS partially_paid_users,
        
        -- Subscriber status stats (excluding sandbox and free users)
        SUM(CASE WHEN NOT is_sandbox_user AND NOT is_free_user AND has_subscription AND NOT is_in_free_trial THEN 1 ELSE 0 END) AS users_converted_paid_fully,
        SUM(CASE WHEN NOT is_sandbox_user AND NOT is_free_user AND has_subscription AND auto_renew_enabled THEN 1 ELSE 0 END) AS users_with_active_subscription,
        SUM(CASE WHEN NOT is_sandbox_user AND NOT is_free_user AND is_fully_paying_user AND auto_renew_enabled THEN 1 ELSE 0 END) AS fully_paid_users_with_renewel_subscription, 
       SUM(CASE WHEN NOT is_sandbox_user AND NOT is_free_user AND is_partially_paying_user AND auto_renew_enabled THEN 1 ELSE 0 END) AS partially_paid_users_with_renewel_subscription,
        SUM(CASE WHEN NOT is_sandbox_user AND NOT is_free_user AND has_subscription AND NOT auto_renew_enabled THEN 1 ELSE 0 END) AS users_with_canceled_subscription,
        
                SUM(CASE WHEN NOT is_sandbox_user AND NOT is_free_user 
                 AND is_partially_paying_user AND auto_renew_enabled 
                 AND product_id = 'ai.gymii.gymiiai.subscription.monthly' THEN 1 ELSE 0 END) 
             AS partially_paid_users_with_renewel_subscription_monthly,
        
        SUM(CASE WHEN NOT is_sandbox_user AND NOT is_free_user 
                 AND is_partially_paying_user AND auto_renew_enabled 
                 AND product_id != 'ai.gymii.gymiiai.subscription.monthly' THEN 1 ELSE 0 END) 
             AS partially_paid_users_with_renewel_subscription_yearly,
        
        -- Fully paid users with renewal subscription by plan type
        SUM(CASE WHEN NOT is_sandbox_user AND NOT is_free_user 
                 AND is_fully_paying_user AND auto_renew_enabled 
                 AND product_id = 'ai.gymii.gymiiai.subscription.monthly' THEN 1 ELSE 0 END) 
             AS fully_paid_users_with_renewel_subscription_monthly,
        
        SUM(CASE WHEN NOT is_sandbox_user AND NOT is_free_user 
                 AND is_fully_paying_user AND auto_renew_enabled 
                 AND product_id != 'ai.gymii.gymiiai.subscription.monthly' THEN 1 ELSE 0 END) 
             AS fully_paid_users_with_renewel_subscription_yearly,
        
        -- Realized counts (not in free trial) - Partially paid users
        SUM(CASE WHEN NOT is_sandbox_user AND NOT is_free_user 
                 AND is_partially_paying_user AND auto_renew_enabled 
                 AND NOT is_in_free_trial
                 AND product_id = 'ai.gymii.gymiiai.subscription.monthly' THEN 1 ELSE 0 END) 
             AS partially_paid_users_with_renewel_subscription_monthly_realized,
        
        SUM(CASE WHEN NOT is_sandbox_user AND NOT is_free_user 
                 AND is_partially_paying_user AND auto_renew_enabled 
                 AND NOT is_in_free_trial
                 AND product_id != 'ai.gymii.gymiiai.subscription.monthly' THEN 1 ELSE 0 END) 
             AS partially_paid_users_with_renewel_subscription_yearly_realized,
        
        -- Realized counts (not in free trial) - Fully paid users
        SUM(CASE WHEN NOT is_sandbox_user AND NOT is_free_user 
                 AND is_fully_paying_user AND auto_renew_enabled 
                 AND NOT is_in_free_trial
                 AND product_id = 'ai.gymii.gymiiai.subscription.monthly' THEN 1 ELSE 0 END) 
             AS fully_paid_users_with_renewel_subscription_monthly_realized,
        
        SUM(CASE WHEN NOT is_sandbox_user AND NOT is_free_user 
                 AND is_fully_paying_user AND auto_renew_enabled 
                 AND NOT is_in_free_trial
                 AND product_id != 'ai.gymii.gymiiai.subscription.monthly' THEN 1 ELSE 0 END) 
             AS fully_paid_users_with_renewel_subscription_yearly_realized
        
        
    FROM 
        user_stats
),


funnel_metrics AS (
    SELECT
    
    	
        
    FROM
        counts
)

-- Format the output in a clean, readable way
SELECT
    '=== USER BASE METRICS ===' AS metric_category,
    NULL::INTEGER AS count,
    NULL::NUMERIC AS percentage
    
UNION ALL

SELECT
    'Total Users', 
    total_users,
    100.0
FROM counts

UNION ALL

SELECT
    '  ↳ Sandbox Users (excluded)', 
    sandbox_users,
    ROUND(100.0 * sandbox_users / NULLIF(total_users, 0), 1)
FROM counts

UNION ALL

SELECT
    '  ↳ Free Users (excluded)', 
    free_users,
    ROUND(100.0 * free_users / NULLIF(total_users, 0), 1)
FROM counts

UNION ALL

SELECT
    '  ↳ Analyzed Users (included in analysis)', 
    analyzed_users,
    ROUND(100.0 * analyzed_users / NULLIF(total_users, 0), 1)
FROM counts

UNION ALL

SELECT
    '    ↳ Onboarded Users (completed diet program)', 
    completed_onboarding,
    ROUND(100.0 * completed_onboarding / NULLIF(analyzed_users, 0), 1)
FROM counts

UNION ALL

SELECT
    '       ↳ Subscribed Users (started trial)', 
    users_with_subscription,
    ROUND(100.0 * users_with_subscription / NULLIF(completed_onboarding, 0), 1)
FROM counts

UNION ALL

SELECT
    '       	↳ Fully Paid Users (did not use code)', 
    fully_paid_users,
    ROUND(100.0 * fully_paid_users / NULLIF(users_with_subscription, 0), 1)
FROM counts

UNION ALL

SELECT
    '       		↳ Renewel Turned On', 
    fully_paid_users_with_renewel_subscription,
    ROUND(100.0 * fully_paid_users_with_renewel_subscription / NULLIF(fully_paid_users, 0), 1)
FROM counts

UNION ALL

SELECT
    '       	↳ Partially Paid Users (used discount code)', 
    partially_paid_users,
    ROUND(100.0 * partially_paid_users / NULLIF(users_with_subscription, 0), 1)
FROM counts

UNION ALL

SELECT
    '       		↳ Renewel Turned On', 
    partially_paid_users_with_renewel_subscription,
    ROUND(100.0 * partially_paid_users_with_renewel_subscription / NULLIF(partially_paid_users, 0), 1)
FROM counts

UNION ALL

SELECT
    '=== CONVERSION METRICS ===' AS metric_category,
    NULL::INTEGER AS count,
    NULL::NUMERIC AS percentage
    
UNION ALL

SELECT
    'Onboarding completion Rate', 
    completed_onboarding,
    ROUND(100.0 * completed_onboarding / NULLIF(analyzed_users, 0), 1)
FROM counts

UNION ALL

SELECT
    'Register to start free trial rate', 
    users_with_subscription,
    ROUND(100.0 * users_with_subscription / NULLIF(analyzed_users, 0), 1)
FROM counts

UNION ALL

SELECT
    'Free trial to cancel rate', 
    users_with_canceled_subscription,
    ROUND(100.0 * users_with_canceled_subscription / NULLIF(users_with_subscription, 0), 1)
FROM counts

UNION ALL

SELECT
    'Free trial to paid conversion rate', 
    users_converted_paid_fully,
    ROUND(100.0 * users_converted_paid_fully / NULLIF(users_with_subscription, 0), 1)
FROM counts

UNION ALL
SELECT
    '=== Revenue METRICS ===' AS metric_category,
    NULL::INTEGER AS count,
    NULL::NUMERIC AS percentage
    
UNION ALL


SELECT
    'Total fully paying subscribers (not canceled)', 
    fully_paid_users_with_renewel_subscription,
    ROUND(100.0 * fully_paid_users_with_renewel_subscription / NULLIF(users_with_active_subscription, 0), 1)
FROM counts

UNION ALL

SELECT
    'Total partially paying subscribers (not canceld)', 
    partially_paid_users_with_renewel_subscription,
    ROUND(100.0 * partially_paid_users_with_renewel_subscription / NULLIF(users_with_active_subscription, 0), 1)
FROM counts

UNION ALL


SELECT
    '=== SUBSCRIPTION TYPE BREAKDOWN ===' AS metric_category,
    NULL::INTEGER AS count,
    NULL::NUMERIC AS percentage
FROM counts

UNION ALL

-- Monthly subscriptions
SELECT
    'Monthly fully paying subscribers', 
    fully_paid_users_with_renewel_subscription_monthly,
    ROUND(100.0 * fully_paid_users_with_renewel_subscription_monthly / NULLIF(users_with_active_subscription, 0), 1)
FROM counts

UNION ALL

SELECT
    'Monthly partially paying subscribers', 
    partially_paid_users_with_renewel_subscription_monthly,
    ROUND(100.0 * partially_paid_users_with_renewel_subscription_monthly / NULLIF(users_with_active_subscription, 0), 1)
FROM counts

UNION ALL

-- Yearly subscriptions
SELECT
    'Yearly fully paying subscribers', 
    fully_paid_users_with_renewel_subscription_yearly,
    ROUND(100.0 * fully_paid_users_with_renewel_subscription_yearly / NULLIF(users_with_active_subscription, 0), 1)
FROM counts

UNION ALL

SELECT
    'Yearly partially paying subscribers', 
    partially_paid_users_with_renewel_subscription_yearly,
    ROUND(100.0 * partially_paid_users_with_renewel_subscription_yearly / NULLIF(users_with_active_subscription, 0), 1)
FROM counts

UNION ALL

SELECT
    '=== REALIZED SUBSCRIPTION BREAKDOWN ===' AS metric_category,
    NULL::INTEGER AS count,
    NULL::NUMERIC AS percentage
FROM counts

UNION ALL

-- Realized monthly subscriptions
SELECT
    'Realized monthly fully paying subscribers', 
    fully_paid_users_with_renewel_subscription_monthly_realized,
    ROUND(100.0 * fully_paid_users_with_renewel_subscription_monthly_realized / NULLIF(users_with_active_subscription, 0), 1)
FROM counts

UNION ALL

SELECT
    'Realized monthly partially paying subscribers', 
    partially_paid_users_with_renewel_subscription_monthly_realized,
    ROUND(100.0 * partially_paid_users_with_renewel_subscription_monthly_realized / NULLIF(users_with_active_subscription, 0), 1)
FROM counts

UNION ALL

-- Realized yearly subscriptions
SELECT
    'Realized yearly fully paying subscribers', 
    fully_paid_users_with_renewel_subscription_yearly_realized,
    ROUND(100.0 * fully_paid_users_with_renewel_subscription_yearly_realized / NULLIF(users_with_active_subscription, 0), 1)
FROM counts

UNION ALL

SELECT
    'Realized yearly partially paying subscribers', 
    partially_paid_users_with_renewel_subscription_yearly_realized,
    ROUND(100.0 * partially_paid_users_with_renewel_subscription_yearly_realized / NULLIF(users_with_active_subscription, 0), 1)
FROM counts

UNION ALL

SELECT
    '=== PROJECTED MONTHLY REVENUE ===' AS metric_category,
    NULL::INTEGER AS count,
    NULL::NUMERIC AS percentage
FROM counts

UNION ALL

-- Calculating projected monthly revenue
SELECT
    'Total projected monthly revenue ($)', 
    ROUND(SUM(expected_mmr)::numeric, 2),
    NULL
FROM user_stats
WHERE NOT is_sandbox_user AND NOT is_free_user AND auto_renew_enabled

UNION ALL

-- Breakdown by subscription type
SELECT
    'Monthly subscribers revenue ($)', 
    ROUND(SUM(CASE WHEN product_id = 'ai.gymii.gymiiai.subscription.monthly' THEN expected_mmr ELSE 0 END)::numeric, 2),
    ROUND(100.0 * SUM(CASE WHEN product_id = 'ai.gymii.gymiiai.subscription.monthly' THEN expected_mmr ELSE 0 END) / 
          NULLIF(SUM(expected_mmr), 0), 1)
FROM user_stats
WHERE NOT is_sandbox_user AND NOT is_free_user AND auto_renew_enabled

UNION ALL

SELECT
    'Yearly subscribers revenue ($)', 
    ROUND(SUM(CASE WHEN product_id != 'ai.gymii.gymiiai.subscription.monthly' THEN expected_mmr ELSE 0 END)::numeric, 2),
    ROUND(100.0 * SUM(CASE WHEN product_id != 'ai.gymii.gymiiai.subscription.monthly' THEN expected_mmr ELSE 0 END) / 
          NULLIF(SUM(expected_mmr), 0), 1)
FROM user_stats
WHERE NOT is_sandbox_user AND NOT is_free_user AND auto_renew_enabled
